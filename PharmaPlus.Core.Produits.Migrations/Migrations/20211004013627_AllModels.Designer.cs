// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PharmaPlus.Core.Produits.Infrastructures.Data;

namespace PharmaPlus.Core.Produits.Migrations.Migrations
{
    [DbContext(typeof(ProduitsContext))]
    [Migration("20211004013627_AllModels")]
    partial class AllModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Affectation", b =>
                {
                    b.Property<int>("EmployeId")
                        .HasColumnType("int");

                    b.Property<int>("DepartementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeId", "DepartementId");

                    b.HasIndex("DepartementId");

                    b.ToTable("Affectation");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Autorisation", b =>
                {
                    b.Property<int>("DepartementId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeRHId")
                        .HasColumnType("int");

                    b.HasKey("DepartementId", "PermissionId");

                    b.HasIndex("EmployeRHId");

                    b.HasIndex("PermissionId");

                    b.ToTable("Autorisation");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Adresse")
                        .HasColumnType("int");

                    b.Property<string>("NomClient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumTelephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrenomClient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Commande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FactureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FactureId");

                    b.ToTable("Commande");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.CommandeAchat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeRHId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeRHId");

                    b.ToTable("Commande_Achat");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Composition_commande", b =>
                {
                    b.Property<int>("CommandeId")
                        .HasColumnType("int");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<int?>("CommandeAchatId")
                        .HasColumnType("int");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.HasKey("CommandeId", "ProduitId");

                    b.HasIndex("CommandeAchatId");

                    b.HasIndex("ProduitId");

                    b.ToTable("Composition_commande");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Composition_commandeAchat", b =>
                {
                    b.Property<int>("CommandeAchatId")
                        .HasColumnType("int");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<int?>("PictureId")
                        .HasColumnType("int");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.HasKey("CommandeAchatId", "ProduitId");

                    b.HasIndex("PictureId");

                    b.HasIndex("ProduitId");

                    b.ToTable("Composition_commandeAchat");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Departement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomDepartement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departement");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Employe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Adresse")
                        .HasColumnType("int");

                    b.Property<int>("IdPoste")
                        .HasColumnType("int");

                    b.Property<string>("NomEmploye")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumTelePers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumTeleProf")
                        .HasColumnType("int");

                    b.Property<int?>("PosteId")
                        .HasColumnType("int");

                    b.Property<string>("PrenomEmploye")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PosteId");

                    b.ToTable("Employe");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Facture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Etat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Facture");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Laboratoire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdresseLabo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomLabo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Laboratoire");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Lot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarque")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lot");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Molecule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NomMolecule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Molecule");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartementId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Poste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Poste");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Produit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatePeremption")
                        .HasColumnType("datetime2");

                    b.Property<int>("LaboId")
                        .HasColumnType("int");

                    b.Property<int>("LotId")
                        .HasColumnType("int");

                    b.Property<int>("MoleculeId")
                        .HasColumnType("int");

                    b.Property<string>("NomCommercial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.Property<double>("PrixAchat")
                        .HasColumnType("float");

                    b.Property<string>("PrixPpa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrixVente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LaboId");

                    b.HasIndex("LotId");

                    b.HasIndex("MoleculeId");

                    b.HasIndex("PictureId");

                    b.ToTable("Produit");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Profil", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("PosteId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "PosteId");

                    b.HasIndex("PosteId");

                    b.ToTable("Profil");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Transaction", b =>
                {
                    b.Property<int>("EmployeId")
                        .HasColumnType("int");

                    b.Property<int>("CommandeId")
                        .HasColumnType("int");

                    b.HasKey("EmployeId", "CommandeId");

                    b.HasIndex("CommandeId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Affectation", b =>
                {
                    b.HasOne("PharmaPlus.Core.Produits.Domain.Departement", "Departement")
                        .WithMany("Affectations")
                        .HasForeignKey("DepartementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmaPlus.Core.Produits.Domain.Employe", "Employe")
                        .WithMany("Affectations")
                        .HasForeignKey("EmployeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departement");

                    b.Navigation("Employe");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Autorisation", b =>
                {
                    b.HasOne("PharmaPlus.Core.Produits.Domain.Departement", "Departement")
                        .WithMany("Autorisations")
                        .HasForeignKey("DepartementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmaPlus.Core.Produits.Domain.Employe", "EmployeRH")
                        .WithMany("Autorisations")
                        .HasForeignKey("EmployeRHId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmaPlus.Core.Produits.Domain.Permission", "Permission")
                        .WithMany("Autorisations")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departement");

                    b.Navigation("EmployeRH");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Commande", b =>
                {
                    b.HasOne("PharmaPlus.Core.Produits.Domain.Client", "Client")
                        .WithMany("Commandes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmaPlus.Core.Produits.Domain.Facture", "Facture")
                        .WithMany("Commandes")
                        .HasForeignKey("FactureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Facture");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.CommandeAchat", b =>
                {
                    b.HasOne("PharmaPlus.Core.Produits.Domain.Employe", "EmployeRH")
                        .WithMany("CommandeAchats")
                        .HasForeignKey("EmployeRHId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeRH");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Composition_commande", b =>
                {
                    b.HasOne("PharmaPlus.Core.Produits.Domain.CommandeAchat", null)
                        .WithMany("Composition_commandes")
                        .HasForeignKey("CommandeAchatId");

                    b.HasOne("PharmaPlus.Core.Produits.Domain.Commande", "Commande")
                        .WithMany("Composition_commandes")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmaPlus.Core.Produits.Domain.Produit", "Produit")
                        .WithMany("Composition_commandes")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commande");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Composition_commandeAchat", b =>
                {
                    b.HasOne("PharmaPlus.Core.Produits.Domain.CommandeAchat", "CommandeAchat")
                        .WithMany()
                        .HasForeignKey("CommandeAchatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmaPlus.Core.Produits.Domain.Picture", null)
                        .WithMany("Composition_commandeAchats")
                        .HasForeignKey("PictureId");

                    b.HasOne("PharmaPlus.Core.Produits.Domain.Produit", "Produit")
                        .WithMany()
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommandeAchat");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Employe", b =>
                {
                    b.HasOne("PharmaPlus.Core.Produits.Domain.Poste", "Poste")
                        .WithMany()
                        .HasForeignKey("PosteId");

                    b.Navigation("Poste");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Facture", b =>
                {
                    b.HasOne("PharmaPlus.Core.Produits.Domain.Client", "Client")
                        .WithMany("Facture")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Produit", b =>
                {
                    b.HasOne("PharmaPlus.Core.Produits.Domain.Laboratoire", "Labo")
                        .WithMany("Produit")
                        .HasForeignKey("LaboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmaPlus.Core.Produits.Domain.Lot", "Lot")
                        .WithMany("Produit")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmaPlus.Core.Produits.Domain.Molecule", "Molecule")
                        .WithMany("Produit")
                        .HasForeignKey("MoleculeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmaPlus.Core.Produits.Domain.Picture", "Picture")
                        .WithMany("Produits")
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Labo");

                    b.Navigation("Lot");

                    b.Navigation("Molecule");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Profil", b =>
                {
                    b.HasOne("PharmaPlus.Core.Produits.Domain.Poste", "Poste")
                        .WithMany("Profil")
                        .HasForeignKey("PosteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poste");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Transaction", b =>
                {
                    b.HasOne("PharmaPlus.Core.Produits.Domain.Commande", "Commande")
                        .WithMany("Transaction")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmaPlus.Core.Produits.Domain.Employe", "Employe")
                        .WithMany("Transaction")
                        .HasForeignKey("EmployeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commande");

                    b.Navigation("Employe");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Client", b =>
                {
                    b.Navigation("Commandes");

                    b.Navigation("Facture");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Commande", b =>
                {
                    b.Navigation("Composition_commandes");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.CommandeAchat", b =>
                {
                    b.Navigation("Composition_commandes");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Departement", b =>
                {
                    b.Navigation("Affectations");

                    b.Navigation("Autorisations");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Employe", b =>
                {
                    b.Navigation("Affectations");

                    b.Navigation("Autorisations");

                    b.Navigation("CommandeAchats");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Facture", b =>
                {
                    b.Navigation("Commandes");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Laboratoire", b =>
                {
                    b.Navigation("Produit");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Lot", b =>
                {
                    b.Navigation("Produit");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Molecule", b =>
                {
                    b.Navigation("Produit");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Permission", b =>
                {
                    b.Navigation("Autorisations");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Picture", b =>
                {
                    b.Navigation("Composition_commandeAchats");

                    b.Navigation("Produits");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Poste", b =>
                {
                    b.Navigation("Profil");
                });

            modelBuilder.Entity("PharmaPlus.Core.Produits.Domain.Produit", b =>
                {
                    b.Navigation("Composition_commandes");
                });
#pragma warning restore 612, 618
        }
    }
}
